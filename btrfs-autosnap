#!/bin/sh


############################################################
#                                                          #
#                      BTRFS-AUTOSNAP                      #
#                                                          #
#                              - snoopy3476@outlook.com    #
#                                                          #
#                                                          #
#   [Description]                                          #
#                                                          #
# Refresh the list of btrfs (read-only) snapshots for the  #
# target subvolumes given through cmdline arguments.       #
#                                                          #
# Here, "refreshing snapshots" means following jobs:       #
#   - Create a new btrfs snapshot for a subvolume, only if #
#     there is some changes after the latest snapshot      #
#   - Then remove old snapshots, if each snapshot is both: #
#     - Older than '$SNAP_EXPIRATION_DAYS' days            #
#     - n-th latest, where n > '$SNAP_MIN_COUNT'           #
#                                                          #
# By refreshing (creating + removing) snapshots everyday,  #
# you can maintain enough number of snapshots              #
# without ending up with no free space left                #
# because of unlimited snapshot creation.                  #
#                                                          #
#                                                          #
#   [Usage]                                                #
#                                                          #
# $ btrfs-autosnap [-t <snap_expiration_days>] \           #
#                  [-n <snap_min_count>] \                 #
#                  <subvol-path-1> [subvol-path-2] ...     #
#                                                          #
#                                                          #
#   [Snapshot path]                                        #
#                                                          #
# If refresh a snapshot subvolume with the following path: #
#   - "$PARENT_DIR"/"$SUBVOL_DIR_NAME"                     #
# each snapshot will be stored with the following name:    #
#   - @"$SUBVOL_DIR_NAME"_$(date +%Y.%m.%d-%H:%M:%S)       #
# inside the snapshot list dir with the following path:    #
#   - "$PARENT_DIR"/.@snapshots_"$SUBVOL_DIR_NAME"/        #
#                                                          #
#                                                          #
#   [Examples]                                             #
#                                                          #
#                                                          #
# --- * Run the script on bash *                           #
#                                                          #
# Refresh snapshots of './subvol' and './subvol_2'         #
# with default config                                      #
# $ sudo ./btrfs-autosnap ./subvol ./subvol_2              #
#                                                          #
# Refresh snapshots of '/path/to/subvol'                   #
# with SNAP_EXPIRATION_DAYS=60, and SNAP_MIN_COUNT=5       #
# $ sudo ./btrfs-autosnap -t60 -n5 /path/to/subvol         #
#                                                          #
# Refresh snapshots of './subvol', './subvol_2'            #
# with SNAP_EXPIRATION_DAYS=(default), SNAP_MIN_COUNT=30   #
# $ sudo ./btrfs-autosnap -n 30 ./subvol ./subvol2         #
#                                                          #
#                                                          #
# --- * Run the script everyday with bash *                #
#                                                          #
# File '/etc/cron.daily/btrfs-autosnap-daily' :            #
#   ----------                                             #
#   #!/bin/bash                                            #
#   /path/to/the/script/btrfs-autosnap <SUBVOL_PATH>       #
#   ----------                                             #
#                                                          #
# --- * Show previous versions (snapshot list)      *      #
#     * on Windows explorer remotely,               *      #
#     * when a btrfs subvolume is shared with samba *      #
#                                                          #
# File '/etc/samba/smbd.conf' :                            #
#   ----------                                             #
#   ...                                                    #
#                                                          #
#   vfs objects = shadow_copy2 btrfs acl_xattr             #
#   shadow:snapdir = <PARENT_DIR>/.@snapshots_<SUBVOL_DIR> #
#   shadow:basedir = <PARENT_DIR>/<SUBVOL_DIR>             #
#   shadow:format = @<SUBVOL_DIR>_%Y.%m.%d-%H:%M:%S        #
#   shadow:localtime = yes                                 #
#                                                          #
#   ...                                                    #
#   ----------                                             #
#                                                          #
#                                                          #
############################################################




############################################################
###################### DEFAULT CONFIG ######################
############################################################

#
# [Expiration time after a snapshot creation]
#
# Snapshots which are created $SNAP_EXPIRATION_DAYS days ago
# will be removed after a new snapshot is created.
#
# You can override this default config with argument like:
# $ sudo ./btrfs-autosnap -t30 /path/to/subvol
#
SNAP_EXPIRATION_DAYS_DEFAULT=365

#
# [Minimum number of snapshots to preserve]
#
# Even if a snapshot is expired, it won't be removed
# if the snapshot is in $SNAP_MIN_COUNT-th latest snapshot.
# The priority of this config is higher than the expiration time config.
#
# You can override this default config with argument like:
# $ sudo ./btrfs-autosnap -n10 /path/to/subvol
#
SNAP_MIN_COUNT_DEFAULT=30



############################################################
######################### CONSTANTS ########################
############################################################

#
# [Maximum number of supported snapshot counts]
#
# If actual snapshot counts is larger than this value,
# then the number of removed snapshots when refreshing may be smaller than expected.
#
# (That is, even if all snapshots are expired,
#  the number of remaining snapshots after refresh can be more than "$SNAP_MIN_COUNT")
#
SNAP_MAX_COUNT=104857600

# [Btrfs subvolume inode number]
BTRFS_SUBVOL_INODE_NUM=256

# [Snapshot timestamp]
SNAP_EXEC_TIMESTAMP_CMD="date +%Y.%m.%d-%H:%M:%S"


############################################################
######################### FUNCTIONS ########################
############################################################



# Get the list of snapshots
# (get $COUNT latest snapshots if $COUNT > 0,
#  otherwise ($COUNT == 0) get ones to be expired)
get_snap_list () {
	# Args
	SNAPDIR="$1" BASEDIR_NAME="$2" COUNT="$3"

	# Body
	if [ "$COUNT" -eq 0 ]
	then
		[ "$SNAP_EXPIRATION_DAYS" -gt 0 ] && EXPIRATION_OPT="-mtime +$SNAP_EXPIRATION_DAYS"
		COUNT="$SNAP_MAX_COUNT"
	fi
	find "$SNAPDIR" -maxdepth 1 \
	-regextype sed \
	-regex "$SNAPDIR"/@"$BASEDIR_NAME"_"[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}-[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}" \
	-inum "$BTRFS_SUBVOL_INODE_NUM" \
	$EXPIRATION_OPT \
	| LC_ALL=C sort -r | head -n"$COUNT"
}



# Get the generation of subvolume
get_subvol_gen () {
	# Args
	SUBVOL_PATH="$1"

	# Body
	if [ -d "$SUBVOL_PATH" ]
	then
		btrfs subvolume show "$SUBVOL_PATH" \
		| grep "Generation:" \
		| tr -s '\t' \
		| cut -d'	' -f3
	else
		echo "0"
	fi
}



# Create a new snapshot, and then remove old snapshots
btrfs_refresh_snapshots () {
	# Args
	BASEDIR="$1"

	# Body
	# Initialize paths
	PARENTDIR=$(dirname "$BASEDIR")
	BASEDIR_NAME=$(basename "$BASEDIR")
	SNAPDIR="$PARENTDIR"/.@snapshots_"$BASEDIR_NAME"
	if [ ! -d "$SNAPDIR" ]
	then
		btrfs subvolume create "$SNAPDIR"
		# refresh selinux context for newly created dir
		[ -x restorecon ] && restorecon "$SNAPDIR"
	fi

	# Set info of snapshots
	SNAP_NEW="$SNAPDIR"/@"$BASEDIR_NAME"_"$($SNAP_EXEC_TIMESTAMP_CMD)"
	SNAP_NEW_GEN=$(get_subvol_gen "$BASEDIR")
	SNAP_OLD_LATEST=$(get_snap_list "$SNAPDIR" "$BASEDIR_NAME" 1)
	SNAP_OLD_LATEST_GEN=$(get_subvol_gen "$SNAP_OLD_LATEST")

	# Generate a snapshot if needed
	if [ "$SNAP_NEW_GEN" != "$SNAP_OLD_LATEST_GEN" ] && [ ! -d "$SNAP_NEW" ]
	then
		touch "$BASEDIR" \
		&& btrfs subvolume snapshot -r "$BASEDIR" "$SNAP_NEW"
	fi

	# Delete expired snapshots if exist
	SNAP_EXPIRED=$(get_snap_list "$SNAPDIR" "$BASEDIR_NAME" 0)
	SNAP_EXPIRED_COUNT=$( ([ -n "$SNAP_EXPIRED" ] && echo "$SNAP_EXPIRED") | wc -l)
	SNAP_TOTAL_COUNT=$(get_snap_list "$SNAPDIR" "$BASEDIR_NAME" "$SNAP_MAX_COUNT" | wc -l)
	# if SNAP_EXPIRED list includes snapshots which should be preserved, exlucde them
	if [ "$((SNAP_MIN_COUNT + SNAP_EXPIRED_COUNT))" -gt "$SNAP_TOTAL_COUNT" ]
	then
		SNAP_EXPIRED_COUNT=$((SNAP_TOTAL_COUNT > SNAP_MIN_COUNT ? SNAP_TOTAL_COUNT - SNAP_MIN_COUNT : 0))
		SNAP_EXPIRED=$(echo "$SNAP_EXPIRED" | tail -n"$SNAP_EXPIRED_COUNT")
	fi

	if [ -n "$SNAP_EXPIRED" ]
	then
		echo "$SNAP_EXPIRED" | xargs btrfs subvolume delete
	fi
}



# Print help msg then exit
print_help () {
	# Args
	BIN_NAME="$1"

	# Print help msg
	echo "usage: $BIN_NAME [-t <snap_expiration_days>] [-n <snap_min_count>]"\
	     "<subvol-path-1> [subvol-path-2] ..."
	exit 1
}



############################################################
#################### MAIN SCRIPT ROUTINE ###################
############################################################


BIN_NAME="$(basename "$0")"



# parse args opt
SNAP_EXPIRATION_DAYS="$SNAP_EXPIRATION_DAYS_DEFAULT"
SNAP_MIN_COUNT="$SNAP_MIN_COUNT_DEFAULT"
while getopts "t:n:" opt; do case "$opt" in
	t)
		# Env var check (if non-negative number)
		if [ -z "${OPTARG##[0-9]*}" ]
		then
			SNAP_EXPIRATION_DAYS="$OPTARG"
		else
			echo "Invalid expiration days: $OPTARG" 1>&2
			print_help "$BIN_NAME"
		fi
		;;
	n)
		# Env var check (if non-negative number)
		if [ -z "${OPTARG##[0-9]*}" ]
		then
			SNAP_MIN_COUNT="$OPTARG"
		else
			echo "Invalid minimum snapshots count: $OPTARG" 1>&2
			print_help "$BIN_NAME"
		fi
		;;
	*)
		print_help "$BIN_NAME"
		;;
esac; done

# Remove all opts
shift $((OPTIND - 1))

# check if subvolume path arg exists
if [ "$#" -eq 0 ]
then
	print_help "$BIN_NAME"
fi



# Root check
if [ "$(id -u)" -ne 0 ]
then
	echo "$BIN_NAME: Root privilege needed" 1>&2
	exit 1
fi



# sync disk cache to storage
sync



# Repeat refreshing snapshots, for all subvolume arguments
for ARG in "$@"
do
	# Only if path is subvolume (check if path is btrfs subvolume inode)
	if [ "$(stat -c '%i' "$ARG" 2> /dev/null)" = "$BTRFS_SUBVOL_INODE_NUM" ]
	then
		echo "Refreshing snapshots for '$ARG'..."
		btrfs_refresh_snapshots "$ARG"
	else
		echo "Invalid subvolume path '$ARG'!"
	fi
done
